<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Runtime.InteropServices;

<# 

List<string> types = new List<string>{
    "Byte",
    "Int16",
    "Int24", 
    "Int32", 
    "Int64",
    "UInt16",
    "UInt24", 
    "UInt32", 
    "UInt64",
    "Single", 
    "Double",
    "Int16E",
    "Int24E", 
    "Int32E", 
    "Int64E",
    "UInt16E",
    "UInt24E", 
    "UInt32E", 
    "UInt64E",
    "SingleE", 
    "DoubleE" 
}; 

#>
<# Action<string, string> loop = (type, s) => { 
          #>int size = dst.Length * Marshal.SizeOf(typeof(<#= type #>));
            byte[] buffer = new byte[size];
            fs.Read(buffer, 0, size);
            fixed (byte* pin = buffer)
            {
                var p = (<#= type #>*)pin;
                for (var i = 0; i < dst.Length; i++)
                {
                    <#= s #>
                }
            }
<# }; #>

namespace Pixels.IO
{
    public static partial class FileStream
    {
        #region Load
        <# foreach(var type in types){ #>

        public unsafe static void Load<#= type #>(this <#= type #>[] dst, Stream fs)
        {
            <# loop(type,"dst[i] = *p++;"); #>
        }

        <# } #>
        #endregion

        #region Load w Action
        <# foreach(var type in types){ #>

        public unsafe static void Load<#= type #><T>(this T[] dst, Stream fs, Func<<#= type #>, T> func) where T : struct
        {
            <# loop(type,"dst[i] = func(*p++);"); #>
        }

        <# } #>
        #endregion

        #region Load to Int32
        <# foreach(var type in types.Where(n => n != "Int32")){ #>

        public unsafe static void Load<#= type #>(this int[] dst, Stream fs)
        {
            <# loop(type,"dst[i] = (int)*p++;"); #>
        }

        <# } #>
        #endregion

        #region Load to Single
        <# foreach(var type in types.Where(n => n != "Single")){ #>

        public unsafe static void Load<#= type #>(this float[] dst, Stream fs)
        {
            <# loop(type,"dst[i] = (float)*p++;"); #>
        }

        <# } #>
        #endregion

        #region Load to Double
        <# foreach(var type in types.Where(n => n != "Double")){ #>

        public unsafe static void Load<#= type #>(this double[] dst, Stream fs)
        {
            <# loop(type,"dst[i] = (double)*p++;"); #>
        }

        <# } #>
        #endregion

    }
}
