<# 
List<string> types = new List<string>{
    "Byte",
    "Int16",
    "Int24", 
    "Int32", 
    "Int64",
    "UInt16",
    "UInt24", 
    "UInt32", 
    "UInt64",
    "Single", 
    "Double",
    "Int16E",
    "Int24E", 
    "Int32E", 
    "Int64E",
    "UInt16E",
    "UInt24E", 
    "UInt32E", 
    "UInt64E",
    "SingleE", 
    "DoubleE" 
}; 
#>
<# Action<string, string> loop = (type, code) => { 
              #>int size = Marshal.SizeOf(typeof(<#= type #>));
                var buffer = new byte[buffersize * size];

				int index = 0;
				var rest = (int)(stream.Length - stream.Position);
				while (rest >= buffer.Length)
				{
					rest -= stream.Read(buffer, 0, buffer.Length);
					fixed (byte* pin = buffer)
					{
						var p = (<#= type #>*)pin;
						var last = index + buffersize;
						while(index < last)
                        {
                            <#= code #>
                        }
					}
				}
<# }; #>