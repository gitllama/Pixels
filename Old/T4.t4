/*T4.tt*/
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
<#
    Dictionary<string,string> _dic = new Dictionary<string,string>();

    string AddT4(string _key, string _code)
    {
        _dic.Add(_key, _code);
        return _key;
    }
    string GetT4(string _key)
    {
        return _dic[_key];
    }

#>

/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/

string _regStart = @"^\/\*\/";
string _regEnd = @"\/\*\/$";

Dictionary<string,string> _dic = new Dictionary<string,string>();

string T4(string _key, string _code)
{
    _dic.Add(_key, _code);
    WriteLine("A");
//PushIndent("L1 ") PopIndent() ClearIndent
}

// var src = File.ReadAllText(Host.ResolvePath(@"sample.cs"));
// var m = Regex.Matches(src, @"\/\/T4\[(?<key>[\s\S]*?)\]\{(?<value>[\s\S]*?)\/\/\}T4");
// var methods = m.Cast<Match>().ToDictionary<Match, string, string>(k => k.Groups["key"].Value, v => v.Groups["value"].Value);

List<string> types = new List<string>{
"Byte",
"Int16",
"Int24",
"Int32",
"Int64",
"UInt16",
"UInt24",
"UInt32",
"UInt64",
"Single",
"Double",
"Int16E",
"Int24E",
"Int32E",
"Int64E",
"UInt16E",
"UInt24E",
"UInt32E",
"UInt64E",
"SingleE",
"DoubleE"
};

string CommentT4(string _code)
{
    return _code;
}
string GetT4(string _key)
{
    return _dic[_key];
}

<# //@ template language="C#" inherits="../../T4Base.tt" #>


//*/*/*/*/*/*

/* Code generated using the t4 templates <#
var src = File.ReadAllText(Host.ResolvePath(targetPath));
var m = Regex.Matches(src, @"T4\[(?<key>[\s\S]*?)\]\{(?<value>[\s\S]*?)\/\/\}T4");
var methods = m.Cast<Match>().ToDictionary<Match, string, string>(k => k.Groups["key"].Value, v => v.Groups["value"].Value);
#>
        // <# foreach(var i in types.Where(n => n != "Byte")){ #><#= methods["A"].Replace("Byte", i) #><# } #>


        // <# foreach(var i in types.Where(n => n != "Byte")){ #><#= methods["B"].Replace("Byte", i) #><# } #>


/*/*/*/*/

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".generated.cs" #>
<#
    void Method(string code, string[] src, Func<string, string, string> func)
    {
        foreach(var i in src)
        {
            Write(func(code,i));
        }
    }

	var types = new string[]{  };
#>

generated by T4Base.t4 v0.0.1
